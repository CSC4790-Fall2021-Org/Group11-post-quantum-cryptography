.LC0:
        .string "\n"
main:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 160
        mov     DWORD PTR [rbp-24], 4
        mov     DWORD PTR [rbp-28], 4
        mov     DWORD PTR [rbp-32], 4
        mov     DWORD PTR [rbp-36], 1
        mov     DWORD PTR [rbp-112], 1
        mov     DWORD PTR [rbp-108], 1
        mov     DWORD PTR [rbp-104], 1
        mov     DWORD PTR [rbp-100], 1
        mov     DWORD PTR [rbp-96], 1
        mov     DWORD PTR [rbp-92], 1
        mov     DWORD PTR [rbp-88], 1
        mov     DWORD PTR [rbp-84], 1
        mov     DWORD PTR [rbp-80], 1
        mov     DWORD PTR [rbp-76], 1
        mov     DWORD PTR [rbp-72], 1
        mov     DWORD PTR [rbp-68], 1
        mov     DWORD PTR [rbp-64], 1
        mov     DWORD PTR [rbp-60], 1
        mov     DWORD PTR [rbp-56], 1
        mov     DWORD PTR [rbp-52], 1
        mov     DWORD PTR [rbp-128], 1
        mov     DWORD PTR [rbp-124], 1
        mov     DWORD PTR [rbp-120], 1
        mov     DWORD PTR [rbp-116], 1
        mov     DWORD PTR [rbp-144], 1
        mov     DWORD PTR [rbp-140], 1
        mov     DWORD PTR [rbp-136], 1
        mov     DWORD PTR [rbp-132], 1
        mov     DWORD PTR [rbp-160], 0
        mov     DWORD PTR [rbp-156], 0
        mov     DWORD PTR [rbp-152], 0
        mov     DWORD PTR [rbp-148], 0
        mov     DWORD PTR [rbp-4], 0
        jmp     .L2
.L7:
        mov     DWORD PTR [rbp-8], 0
        jmp     .L3
.L6:
        mov     DWORD PTR [rbp-12], 0
        jmp     .L4
.L5:
        mov     eax, DWORD PTR [rbp-8]
        movsx   rdx, eax
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        add     rax, rdx
        mov     ecx, DWORD PTR [rbp-160+rax*4]
        mov     eax, DWORD PTR [rbp-12]
        movsx   rdx, eax
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        sal     rax, 2
        add     rax, rdx
        mov     edx, DWORD PTR [rbp-112+rax*4]
        mov     eax, DWORD PTR [rbp-8]
        movsx   rsi, eax
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        add     rax, rsi
        mov     eax, DWORD PTR [rbp-128+rax*4]
        imul    eax, edx
        lea     edx, [rcx+rax]
        mov     eax, DWORD PTR [rbp-8]
        movsx   rcx, eax
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        add     rax, rcx
        mov     DWORD PTR [rbp-160+rax*4], edx
        add     DWORD PTR [rbp-12], 1
.L4:
        mov     eax, DWORD PTR [rbp-12]
        cmp     eax, DWORD PTR [rbp-32]
        jl      .L5
        add     DWORD PTR [rbp-8], 1
.L3:
        mov     eax, DWORD PTR [rbp-8]
        cmp     eax, DWORD PTR [rbp-36]
        jl      .L6
        add     DWORD PTR [rbp-4], 1
.L2:
        mov     eax, DWORD PTR [rbp-4]
        cmp     eax, DWORD PTR [rbp-24]
        jl      .L7
        mov     DWORD PTR [rbp-16], 0
        jmp     .L8
.L11:
        mov     DWORD PTR [rbp-20], 0
        jmp     .L9
.L10:
        mov     eax, DWORD PTR [rbp-20]
        movsx   rdx, eax
        mov     eax, DWORD PTR [rbp-16]
        cdqe
        add     rax, rdx
        mov     edx, DWORD PTR [rbp-160+rax*4]
        mov     eax, DWORD PTR [rbp-20]
        movsx   rcx, eax
        mov     eax, DWORD PTR [rbp-16]
        cdqe
        add     rax, rcx
        mov     eax, DWORD PTR [rbp-144+rax*4]
        add     edx, eax
        mov     eax, DWORD PTR [rbp-20]
        movsx   rcx, eax
        mov     eax, DWORD PTR [rbp-16]
        cdqe
        add     rax, rcx
        mov     DWORD PTR [rbp-160+rax*4], edx
        mov     eax, DWORD PTR [rbp-20]
        movsx   rdx, eax
        mov     eax, DWORD PTR [rbp-16]
        cdqe
        add     rax, rdx
        mov     eax, DWORD PTR [rbp-160+rax*4]
        mov     esi, eax
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(int)
        mov     esi, OFFSET FLAT:.LC0
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        add     DWORD PTR [rbp-20], 1
.L9:
        mov     eax, DWORD PTR [rbp-20]
        cmp     eax, DWORD PTR [rbp-36]
        jl      .L10
        add     DWORD PTR [rbp-16], 1
.L8:
        mov     eax, DWORD PTR [rbp-16]
        cmp     eax, DWORD PTR [rbp-24]
        jl      .L11
        mov     eax, 0
        leave
        ret
__static_initialization_and_destruction_0(int, int):
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     DWORD PTR [rbp-4], edi
        mov     DWORD PTR [rbp-8], esi
        cmp     DWORD PTR [rbp-4], 1
        jne     .L15
        cmp     DWORD PTR [rbp-8], 65535
        jne     .L15
        mov     edi, OFFSET FLAT:_ZStL8__ioinit
        call    std::ios_base::Init::Init() [complete object constructor]
        mov     edx, OFFSET FLAT:__dso_handle
        mov     esi, OFFSET FLAT:_ZStL8__ioinit
        mov     edi, OFFSET FLAT:_ZNSt8ios_base4InitD1Ev
        call    __cxa_atexit
.L15:
        nop
        leave
        ret
_GLOBAL__sub_I_main:
        push    rbp
        mov     rbp, rsp
        mov     esi, 65535
        mov     edi, 1
        call    __static_initialization_and_destruction_0(int, int)
        pop     rbp
        ret